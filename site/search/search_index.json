{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for CompNeuroPy","text":"<p>CompNeuroPy is an assisting Python package for working with ANNarchy (GitHub, documentation, DOI). It is intended to help structure simulations with computational neuroscience models in a modular way and to make them more easily replicable. People who want to start working with ANNarchy are strongly recommended to first learn exclusively the functionality of ANNarchy. CompNeuroPy uses very few features of ANNarchy at this time. But also adds various special features.</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2022 Oliver Maith</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"main/generate_models/","title":"Generate Models","text":""},{"location":"main/generate_models/#introduction","title":"Introduction","text":"<p>One can create a CompNeuroPy-model using the <code>generate_model</code> class. The <code>generate_model</code> class takes as one argument the <code>model_creation_function</code>. In this function a classical ANNarchy model is created (populations, projections). The <code>generate_model</code> class only adds a framework to the model. Neccessary for a CompNeuroPy-model is to define unique names for all populations and projections. Models are created in three steps:</p> <ol> <li>model initialization: the initialization of the <code>generate_model</code> object, initializes the framework of the model without creating the ANNarchy objects (populations, projections)</li> <li>model creation: create the ANNarchy objects (populations, projections), i.e., run the <code>model_creation function</code></li> <li>model compilation: compile all created models</li> </ol>"},{"location":"main/generate_models/#example","title":"Example","text":"<pre><code>from CompNeuroPy import generate_model\nmy_model = generate_model(model_creation_function=create_model,  ### the most important part, this function creates the model (populations, projections)\n                          model_kwargs={'a':1, 'b':2},           ### define the two arguments a and b of function create_model\n                          name='my_model',                       ### you can give the model a name\n                          description='my simple example model', ### you can give the model a description\n                          do_create=True,                        ### create the model directly\n                          do_compile=True,                       ### let the model (and all models created before) compile directly\n                          compile_folder_name='my_model')        ### name of the saved compilation folder\n</code></pre> <p>The following function could be the corresponding model_creation_function:</p> <pre><code>from ANNarchy import Population, Izhikevich\ndef create_model(a, b):\n    pop = Population(geometry=a, neuron=Izhikevich, name='Izh_pop_a') ### first population, size a\n    pop.b = 0                                                         ### some parameter adjustment\n    Population(geometry=b, neuron=Izhikevich, name='Izh_pop_b')       ### second population, size b\n</code></pre> <p>Here, two populations are created (both use built-in Izhikevich neuron model of ANNarchy). The function does not require a return value. It is important that all populations and projections have unique names.</p> <p>A more detailed example is available in the Examples.</p>"},{"location":"main/generate_models/#src.CompNeuroPy.generate_model.generate_model","title":"<code>src.CompNeuroPy.generate_model.generate_model</code>","text":"<p>Class for creating and compiling a model.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>name of the model</p> <code>description</code> <code>str</code> <p>description of the model</p> <code>populations</code> <code>list</code> <p>list of all populations of the model</p> <code>projections</code> <code>list</code> <p>list of all projections of the model</p> <code>attribute_df</code> <code>pandas dataframe</code> <p>dataframe containing all attributes of the model compartments</p> <code>created</code> <code>bool</code> <p>True if the model is created</p> <code>compiled</code> <code>bool</code> <p>True if the model is compiled</p> Source code in <code>src/CompNeuroPy/generate_model.py</code> <pre><code>class generate_model:\n    \"\"\"\n    Class for creating and compiling a model.\n\n    Attributes:\n        name (str):\n            name of the model\n        description (str):\n            description of the model\n        populations (list):\n            list of all populations of the model\n        projections (list):\n            list of all projections of the model\n        attribute_df (pandas dataframe):\n            dataframe containing all attributes of the model compartments\n        created (bool):\n            True if the model is created\n        compiled (bool):\n            True if the model is compiled\n    \"\"\"\n\n    initialized_models = {}\n    compiled_models = {}\n\n    def __init__(\n        self,\n        model_creation_function,\n        model_kwargs=None,\n        name=\"model\",\n        description=\"\",\n        do_create=True,\n        do_compile=True,\n        compile_folder_name=\"annarchy\",\n    ):\n        \"\"\"\n        Initializes the generate_model class.\n\n        Args:\n            model_creation_function (function):\n                Function which creates the model.\n            model_kwargs (dict):\n                Keyword arguments for model_creation_function. Default: None.\n            name (str):\n                Name of the model. Default: \"model\".\n            description (str):\n                Description of the model. Default: \"\".\n            do_create (bool):\n                If True the model is created directly. Default: True.\n            do_compile (bool):\n                If True the model is compiled directly. Default: True.\n            compile_folder_name (str):\n                Name of the folder in which the model is compiled. Default: \"annarchy\".\n        \"\"\"\n        self.name = name\n        if name == \"model\":\n            self.name = name + str(self._nr_models())\n        self.description = description\n        self.model_creation_function = model_creation_function\n        self.compile_folder_name = compile_folder_name\n        self.model_kwargs = model_kwargs\n        self.populations = []\n        self.projections = []\n        self.initialized_models[self.name] = False\n        self.compiled_models[self.name] = False\n        if do_create:\n            self.create(do_compile=do_compile, compile_folder_name=compile_folder_name)\n\n    def __getattr__(self, name):\n        if name == \"created\":\n            return self.initialized_models[self.name]\n        elif name == \"compiled\":\n            return self.compiled_models[self.name]\n        else:\n            # Default behaviour\n            raise AttributeError\n\n    def compile(self, compile_folder_name=None):\n        \"\"\"\n        compiles a created model\n        \"\"\"\n        ### check if this model is created\n        if self.initialized_models[self.name]:\n            if compile_folder_name == None:\n                compile_folder_name = self.compile_folder_name\n\n            ### check if other models were initialized but not created --&gt; warn that they are not compiled\n            not_created_model_list = self._check_if_models_created()\n            if len(not_created_model_list) &gt; 0:\n                print(\n                    \"\\nWARNING during compile of model \"\n                    + self.name\n                    + \": There are initialized models which are not created, thus not compiled! models:\\n\"\n                    + \"\\n\".join(not_created_model_list)\n                    + \"\\n\"\n                )\n            mf.compile_in_folder(compile_folder_name)\n            self.compiled_models[self.name] = True\n        else:\n            print(\"\\n\")\n            assert False, (\n                \"ERROR during compile of model \"\n                + self.name\n                + \": Only compile the model after it has been created!\"\n            )\n\n    def create(self, do_compile=True, compile_folder_name=None):\n        \"\"\"\n        creates a model and optionally compiles it directly\n        \"\"\"\n        if self.initialized_models[self.name]:\n            print(\"model\", self.name, \"already created!\")\n        else:\n            initial_existing_model = mf.get_full_model()\n            ### create model populations and projections\n            if self.model_kwargs != None:\n                self.model_creation_function(**self.model_kwargs)\n            else:\n                self.model_creation_function()\n            self.initialized_models[self.name] = True\n\n            ### check which populations and projections have been added\n            post_existing_model = mf.get_full_model()\n            ### save only added not all projections/populations\n            for initial_pop in initial_existing_model[\"populations\"]:\n                post_existing_model[\"populations\"].remove(initial_pop)\n            for initial_proj in initial_existing_model[\"projections\"]:\n                post_existing_model[\"projections\"].remove(initial_proj)\n            self.populations = post_existing_model[\"populations\"]\n            self.projections = post_existing_model[\"projections\"]\n\n            self.initialized_models[self.name] = True\n\n            ### check if names of populations and projections are unique\n            self._check_double_compartments()\n\n            ### create parameter dictionary\n            self.attribute_df = self._get_attribute_df()\n\n            if do_compile:\n                self.compile(compile_folder_name)\n\n    def _check_if_models_created(self):\n        \"\"\"\n        checks which CompNeuroPy models are created\n        returns a list with all initialized CompNeuroPy models which are not created yet\n        \"\"\"\n        not_created_model_list = []\n        for key in self.initialized_models.keys():\n            if self.initialized_models[key] == False:\n                not_created_model_list.append(key)\n\n        return not_created_model_list\n\n    def _nr_models(self):\n        \"\"\"\n        returns the current number of initialized (not considering \"created\") CompNeuroPy models\n        \"\"\"\n        return len(list(self.initialized_models.keys()))\n\n    def set_param(self, compartment, parameter_name, parameter_value):\n        \"\"\"\n        sets the specified parameter of the specified compartment\n\n        args:\n            compartment: str\n                name of model compartment\n            parameter_name: str\n                name of parameter of the compartment\n            parameter_value: number or array-like with shape of compartment geometry\n                the value or values of the parameter\n        \"\"\"\n        ### cach if model is not created, only if created populations and projections are available\n        assert (\n            self.initialized_models[self.name] == True\n        ), f\"ERROR set_param: model {self.name} has to be created before setting parameters!\"\n\n        ### check if compartment is in populations or projections\n        comp_in_pop = compartment in self.populations\n        comp_in_proj = compartment in self.projections\n\n        if comp_in_pop:\n            comp_obj = get_population(compartment)\n        elif comp_in_proj:\n            comp_obj = get_projection(compartment)\n        else:\n            assert (\n                comp_in_pop or comp_in_proj\n            ), f\"ERROR set_param: setting parameter {parameter_name} of compartment {compartment}. The compartment is neither a population nor a projection of the model {self.name}!\"\n\n        ### set the parameter value\n        setattr(comp_obj, parameter_name, parameter_value)\n\n        ### update the model attribute_df\n        self._update_attribute_df(compartment, parameter_name, parameter_value)\n\n    def _update_attribute_df(self, compartment, parameter_name, parameter_value):\n        \"\"\"updates the attribute df for a specific paramter\"\"\"\n        paramter_mask = (\n            (self.attribute_df[\"compartment_name\"] == compartment).astype(int)\n            * (self.attribute_df[\"attribute_name\"] == parameter_name).astype(int)\n        ).astype(bool)\n        parameter_idx = np.arange(paramter_mask.size).astype(int)[paramter_mask][0]\n        min_val = af.get_minimum(parameter_value)\n        max_val = af.get_maximum(parameter_value)\n        if min_val != max_val:\n            self.attribute_df.at[parameter_idx, \"value\"] = f\"[{min_val}, {max_val}]\"\n        else:\n            self.attribute_df.at[parameter_idx, \"value\"] = str(min_val)\n        self.attribute_df.at[parameter_idx, \"definition\"] = \"modified\"\n\n    def _check_double_compartments(self):\n        \"\"\"\n        goes over all compartments of the model and checks if compartment is only a population or a projection\n        \"\"\"\n        ### cach if model is not created, only if created populations and projections are available\n        assert (\n            self.initialized_models[self.name] == True\n        ), f\"ERROR model {self.name}: model has to be created before checking for double compartments!\"\n        ### only have to go over populations and check if they are also projections (go over projections not neccessary)\n        pop_in_projections_list = []\n        pop_in_projections = False\n        for pop_name in self.populations:\n            if pop_name in self.projections:\n                pop_in_projections_list.append(pop_name)\n                pop_in_projections = True\n\n        assert (\n            pop_in_projections == False\n        ), f\"ERROR model {self.name}: One or multiple compartments are both population and projection ({pop_in_projections_list}). Rename them!\"\n\n    def _get_attribute_df(self):\n        \"\"\"\n        creates a dataframe containing the attributes of all model compartments\n        \"\"\"\n        ### cach if model is not created, only if created populations and projections are available\n        assert (\n            self.initialized_models[self.name] == True\n        ), f\"ERROR model {self.name}: model has to be created before creating paramteer dictionary!\"\n\n        ### create empty paramteter dict\n        attribute_dict = {\n            \"compartment_type\": [],\n            \"compartment_name\": [],\n            \"attribute_name\": [],\n            \"value\": [],\n            \"definition\": [],\n        }\n\n        ### fill paramter dict with population attributes\n        for pop in self.populations:\n            for attribute in vars(get_population(pop))[\"attributes\"]:\n                ### store min and max of attribute\n                ### create numpy array with getattr to use numpy min max function\n                values = np.array(\n                    [getattr(get_population(pop), attribute)]\n                    + [getattr(get_population(pop), attribute)]\n                )\n                attribute_dict[\"compartment_type\"].append(\"population\")\n                attribute_dict[\"compartment_name\"].append(pop)\n                attribute_dict[\"attribute_name\"].append(attribute)\n                if values.min() != values.max():\n                    attribute_dict[\"value\"].append(f\"[{values.min()}, {values.max()}]\")\n                else:\n                    attribute_dict[\"value\"].append(str(values.min()))\n                attribute_dict[\"definition\"].append(\"init\")\n\n        ### fill paramter dict with projection attributes\n        for proj in self.projections:\n            for attribute in vars(get_projection(proj))[\"attributes\"]:\n                ### store min and max of attribute\n                ### create numpy array with getattr to use numpy min max function\n                values = np.array(\n                    [getattr(get_projection(proj), attribute)]\n                    + [getattr(get_projection(proj), attribute)]\n                )\n                attribute_dict[\"compartment_type\"].append(\"projection\")\n                attribute_dict[\"compartment_name\"].append(proj)\n                attribute_dict[\"attribute_name\"].append(attribute)\n                if values.min() != values.max():\n                    attribute_dict[\"value\"].append(f\"[{values.min()}, {values.max()}]\")\n                else:\n                    attribute_dict[\"value\"].append(values.min())\n                attribute_dict[\"definition\"].append(\"init\")\n\n        ### return dataframe\n        return pd.DataFrame(attribute_dict)\n</code></pre>"},{"location":"main/generate_models/#src.CompNeuroPy.generate_model.generate_model.__init__","title":"<code>__init__(model_creation_function, model_kwargs=None, name='model', description='', do_create=True, do_compile=True, compile_folder_name='annarchy')</code>","text":"<p>Initializes the generate_model class.</p> <p>Parameters:</p> Name Type Description Default <code>model_creation_function</code> <code>function</code> <p>Function which creates the model.</p> required <code>model_kwargs</code> <code>dict</code> <p>Keyword arguments for model_creation_function. Default: None.</p> <code>None</code> <code>name</code> <code>str</code> <p>Name of the model. Default: \"model\".</p> <code>'model'</code> <code>description</code> <code>str</code> <p>Description of the model. Default: \"\".</p> <code>''</code> <code>do_create</code> <code>bool</code> <p>If True the model is created directly. Default: True.</p> <code>True</code> <code>do_compile</code> <code>bool</code> <p>If True the model is compiled directly. Default: True.</p> <code>True</code> <code>compile_folder_name</code> <code>str</code> <p>Name of the folder in which the model is compiled. Default: \"annarchy\".</p> <code>'annarchy'</code> Source code in <code>src/CompNeuroPy/generate_model.py</code> <pre><code>def __init__(\n    self,\n    model_creation_function,\n    model_kwargs=None,\n    name=\"model\",\n    description=\"\",\n    do_create=True,\n    do_compile=True,\n    compile_folder_name=\"annarchy\",\n):\n    \"\"\"\n    Initializes the generate_model class.\n\n    Args:\n        model_creation_function (function):\n            Function which creates the model.\n        model_kwargs (dict):\n            Keyword arguments for model_creation_function. Default: None.\n        name (str):\n            Name of the model. Default: \"model\".\n        description (str):\n            Description of the model. Default: \"\".\n        do_create (bool):\n            If True the model is created directly. Default: True.\n        do_compile (bool):\n            If True the model is compiled directly. Default: True.\n        compile_folder_name (str):\n            Name of the folder in which the model is compiled. Default: \"annarchy\".\n    \"\"\"\n    self.name = name\n    if name == \"model\":\n        self.name = name + str(self._nr_models())\n    self.description = description\n    self.model_creation_function = model_creation_function\n    self.compile_folder_name = compile_folder_name\n    self.model_kwargs = model_kwargs\n    self.populations = []\n    self.projections = []\n    self.initialized_models[self.name] = False\n    self.compiled_models[self.name] = False\n    if do_create:\n        self.create(do_compile=do_compile, compile_folder_name=compile_folder_name)\n</code></pre>"},{"location":"main/generate_models/#src.CompNeuroPy.generate_model.generate_model.compile","title":"<code>compile(compile_folder_name=None)</code>","text":"<p>compiles a created model</p> Source code in <code>src/CompNeuroPy/generate_model.py</code> <pre><code>def compile(self, compile_folder_name=None):\n    \"\"\"\n    compiles a created model\n    \"\"\"\n    ### check if this model is created\n    if self.initialized_models[self.name]:\n        if compile_folder_name == None:\n            compile_folder_name = self.compile_folder_name\n\n        ### check if other models were initialized but not created --&gt; warn that they are not compiled\n        not_created_model_list = self._check_if_models_created()\n        if len(not_created_model_list) &gt; 0:\n            print(\n                \"\\nWARNING during compile of model \"\n                + self.name\n                + \": There are initialized models which are not created, thus not compiled! models:\\n\"\n                + \"\\n\".join(not_created_model_list)\n                + \"\\n\"\n            )\n        mf.compile_in_folder(compile_folder_name)\n        self.compiled_models[self.name] = True\n    else:\n        print(\"\\n\")\n        assert False, (\n            \"ERROR during compile of model \"\n            + self.name\n            + \": Only compile the model after it has been created!\"\n        )\n</code></pre>"},{"location":"main/generate_models/#src.CompNeuroPy.generate_model.generate_model.create","title":"<code>create(do_compile=True, compile_folder_name=None)</code>","text":"<p>creates a model and optionally compiles it directly</p> Source code in <code>src/CompNeuroPy/generate_model.py</code> <pre><code>def create(self, do_compile=True, compile_folder_name=None):\n    \"\"\"\n    creates a model and optionally compiles it directly\n    \"\"\"\n    if self.initialized_models[self.name]:\n        print(\"model\", self.name, \"already created!\")\n    else:\n        initial_existing_model = mf.get_full_model()\n        ### create model populations and projections\n        if self.model_kwargs != None:\n            self.model_creation_function(**self.model_kwargs)\n        else:\n            self.model_creation_function()\n        self.initialized_models[self.name] = True\n\n        ### check which populations and projections have been added\n        post_existing_model = mf.get_full_model()\n        ### save only added not all projections/populations\n        for initial_pop in initial_existing_model[\"populations\"]:\n            post_existing_model[\"populations\"].remove(initial_pop)\n        for initial_proj in initial_existing_model[\"projections\"]:\n            post_existing_model[\"projections\"].remove(initial_proj)\n        self.populations = post_existing_model[\"populations\"]\n        self.projections = post_existing_model[\"projections\"]\n\n        self.initialized_models[self.name] = True\n\n        ### check if names of populations and projections are unique\n        self._check_double_compartments()\n\n        ### create parameter dictionary\n        self.attribute_df = self._get_attribute_df()\n\n        if do_compile:\n            self.compile(compile_folder_name)\n</code></pre>"},{"location":"main/generate_models/#src.CompNeuroPy.generate_model.generate_model.set_param","title":"<code>set_param(compartment, parameter_name, parameter_value)</code>","text":"<p>sets the specified parameter of the specified compartment</p> <p>Parameters:</p> Name Type Description Default <code>compartment</code> <p>str name of model compartment</p> required <code>parameter_name</code> <p>str name of parameter of the compartment</p> required <code>parameter_value</code> <p>number or array-like with shape of compartment geometry the value or values of the parameter</p> required Source code in <code>src/CompNeuroPy/generate_model.py</code> <pre><code>def set_param(self, compartment, parameter_name, parameter_value):\n    \"\"\"\n    sets the specified parameter of the specified compartment\n\n    args:\n        compartment: str\n            name of model compartment\n        parameter_name: str\n            name of parameter of the compartment\n        parameter_value: number or array-like with shape of compartment geometry\n            the value or values of the parameter\n    \"\"\"\n    ### cach if model is not created, only if created populations and projections are available\n    assert (\n        self.initialized_models[self.name] == True\n    ), f\"ERROR set_param: model {self.name} has to be created before setting parameters!\"\n\n    ### check if compartment is in populations or projections\n    comp_in_pop = compartment in self.populations\n    comp_in_proj = compartment in self.projections\n\n    if comp_in_pop:\n        comp_obj = get_population(compartment)\n    elif comp_in_proj:\n        comp_obj = get_projection(compartment)\n    else:\n        assert (\n            comp_in_pop or comp_in_proj\n        ), f\"ERROR set_param: setting parameter {parameter_name} of compartment {compartment}. The compartment is neither a population nor a projection of the model {self.name}!\"\n\n    ### set the parameter value\n    setattr(comp_obj, parameter_name, parameter_value)\n\n    ### update the model attribute_df\n    self._update_attribute_df(compartment, parameter_name, parameter_value)\n</code></pre>"}]}